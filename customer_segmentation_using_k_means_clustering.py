# -*- coding: utf-8 -*-
"""Customer Segmentation using K-means Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-cNO95MsR0Eor6v_ziT5putmHjDCX7FD

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection and Analysis"""

#Loading the data from csv to pandas dataframe
customer_data = pd.read_csv('/content/Mall_Customers.csv')

#First five rows in the data frame
customer_data.head()

#finding the number rows and columns
customer_data.shape

#Insight about the dataset
customer_data.info()

#Checking for missing values
customer_data.isnull().sum()

"""Choosing the annual Income colunm and spending score colunm"""

#Splicing the dataframe to the feature we want
X = customer_data.iloc[:,[3,4]].values

print(X)

"""Choosing the number of clusters
(WCSS -> within cluster sum of square)
"""

# Finding WCSS value for different number of clusters

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters=i,init = 'k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

#Plot an elbow graph
sns.set()
plt.plot(range(1,11),wcss)
plt.title('Elbow Point Graph')
plt.xlabel('Number of Cluster')
plt.ylabel('WCSS')
plt.show()

"""Optimum number of Clusters = 5"""

#Training the K-means Clustering Models
kmeans = KMeans(n_clusters=5, init='k-means++',random_state=0)

#Return a label for each data point based on their cluster
Y = kmeans.fit_predict(X)
print(Y)

"""Visualizing all the Clusters"""

#plotting alll the Cluster and their centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0],X[Y==0,1], s=50, c='green', label = 'Cluster 1')
plt.scatter(X[Y==1,0],X[Y==1,1], s=50, c='red', label = 'Cluster 2')
plt.scatter(X[Y==2,0],X[Y==2,1], s=50, c='yellow', label = 'Cluster 3')
plt.scatter(X[Y==3,0],X[Y==3,1], s=50, c='violet', label = 'Cluster 4')
plt.scatter(X[Y==4,0],X[Y==4,1], s=50, c='blue', label = 'Cluster 5')

#Plot the centriods
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100, c =  'cyan' , label = 'centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

